#include <stdio.h>
#include <string.h>
#include <sqlca.h>
/* Pour le type relatif aux noms dans la table pg_tables (NAMEDATALEN)*/
#include <postgres.h>
/* Pour ajouter le type date SQL */
#include <pgtypes_date.h>

void insererReservation() {
	EXEC SQL BEGIN DECLARE SECTION;
		char idPers[10];
		char idPiece[10];
		char dateChaine[20];
		date dateSQL;
		const char* requeteInsertionReservation = "INSERT INTO reserve (idP, idPers, date) VALUES (?, ?, ?)";
	EXEC SQL END DECLARE SECTION;

	printf("Insertion dans RESERVATION(idPers, date, idPiece)\n");
	printf("idPers : \n");
	scanf("%s", idPers);
	printf("date : \n");
	scanf("%s", dateChaine);
	printf("idPiece : \n");
	scanf("%s", idPiece);

	dateSQL = PGTYPESdate_from_asc(dateChaine, NULL);
	EXEC SQL PREPARE requetePreparee FROM :requeteInsertionReservation;
	EXEC SQL EXECUTE requetePreparee USING :idPiece, :idPers, :dateSQL;
}

void afficherRapportIntrusion() {
	int arreter = 0;
	EXEC SQL BEGIN DECLARE SECTION;
		char nomPersonne[20];
		char idPiece[10];
		char* dateChaine;
		date dateSQL;
	EXEC SQL END DECLARE SECTION;
	
	EXEC SQL DECLARE curseurIntrusion CURSOR FOR SELECT * FROM intrusion;
	EXEC SQL OPEN curseurIntrusion;
	
	printf("RAPPORT D'INTRUSION date - salle - intru\n");
	printf("------------------------------------------------------ \n");
	do {
		EXEC SQL FETCH curseurIntrusion INTO :dateSQL, :idPiece, :nomPersonne;
		if (sqlca.sqlerrd[2] == 1) {
			dateChaine = PGTYPESdate_to_asc(dateSQL);
			printf("%s %s %s\n", dateChaine, idPiece, nomPersonne);
		}
		else
			arreter = 1;
	} while (arreter != 1);
	printf("------------------------------------------------------ \n");

	EXEC SQL CLOSE curseurIntrusion;
}

void rapportActivite() {
	int arreter = 0;
	EXEC SQL BEGIN DECLARE SECTION;
		char nomPersonne[20];
		char ok[10];
		char* dateChaine;
		date dateSQL;
	EXEC SQL END DECLARE SECTION;

	printf("Nom de la personne ?\n");
	// Attention, on attend une chaîne avec des espaces !
	scanf(" %[^\n]s",nomPersonne);

	EXEC SQL DECLARE curseurActivite CURSOR FOR SELECT date, ok FROM rapport_activite WHERE nom = :nomPersonne;
	EXEC SQL OPEN curseurActivite;
	
	printf("RAPPORT D'ACTIVITE DE %s --- date - cohérent (vrai/faux)\n", nomPersonne);
	printf("------------------------------------------------------\n");
	do {
		EXEC SQL FETCH curseurActivite INTO :dateSQL, :ok;
		if (sqlca.sqlerrd[2] == 1) {
			dateChaine = PGTYPESdate_to_asc(dateSQL);
			printf("(%s, %s)\n", dateChaine, ok);
		}
		else
			arreter = 1;
	} while (arreter != 1);
	printf("------------------------------------------------------\n");

	EXEC SQL CLOSE curseurActivite;
}

void lieuxVisites() {
	int arreter = 0;
	EXEC SQL BEGIN DECLARE SECTION;
		char nomPersonne[20];
		char idPiece[10];
		char* dateChaine;
		date dateSQL;
	EXEC SQL END DECLARE SECTION;

	printf("Nom de la personne ?\n");
	// Attention, on attend une chaîne avec des espaces !
	scanf(" %[^\n]s",nomPersonne);

	EXEC SQL DECLARE curseurTache CURSOR FOR SELECT pa.date, pa.idP FROM passePar pa , personne p WHERE p.nom = :nomPersonne AND pa.idPers = p.idPers;
	EXEC SQL OPEN curseurTache;
	
	printf("LIEUX VISITES PAR %s --- date - piece\n", nomPersonne);
	printf("------------------------------------------------------\n");
	do {
		EXEC SQL FETCH curseurTache INTO :dateSQL, :idPiece;
		if (sqlca.sqlerrd[2] == 1) {
			dateChaine = PGTYPESdate_to_asc(dateSQL);
			printf("(%s, %s)\n", dateChaine, idPiece);
		}
		else
			arreter = 1;
	} while (arreter != 1);
	printf("------------------------------------------------------\n");

	EXEC SQL CLOSE curseurTache;
}

void supprimerPersonne() {
	EXEC SQL BEGIN DECLARE SECTION;
		char idPers[10];
		const char* requeteSuppression = "DELETE FROM personne WHERE idPers = ?";
	EXEC SQL END DECLARE SECTION;

	printf("Valeur de l'attribut idPers du tuple à supprimer : ");
	scanf("%s", idPers);

	EXEC SQL PREPARE requetePreparee FROM :requeteSuppression;
	EXEC SQL EXECUTE requetePreparee USING :idPers;
}

void insererPersonne() {
	EXEC SQL BEGIN DECLARE SECTION;
		char idPers[10];
		char nom[20];
		char grade[10];
		const char* requeteInsertion = "INSERT INTO personne(idPers, nom, grade) VALUES (?, ?, ?);";
	EXEC SQL END DECLARE SECTION;

	printf("Insertion dans PERSONNE(idPers, nom, grade)\n");
	printf("idPers : ");
	scanf("%s", idPers);
	printf("nom : ");
	scanf("%s", nom);
	printf("grade : ");
	scanf("%s", grade);

	while (strcmp(grade, "PE") != 0 && strcmp(grade, "BIATOSS") != 0 && strcmp(grade, "Etudiant") != 0 && strcmp(grade, "PU") != 0 && strcmp(grade, "MCF") != 0) {
		printf("Les grades pris en compte sont PE, BIATOSS, Etudiant, PU et MCF. Veuillez entrer un de ces grades.\n");
		printf("grade : ");
		scanf("%s", grade);
	}

	EXEC SQL PREPARE requetePreparee FROM :requeteInsertion;
	EXEC SQL EXECUTE requetePreparee USING :idPers, :nom, :grade;
}

int main (int argc, char *argv[]) {
	int entree;
	int sortir = 0;

	/* Les variables de connexion à la base */
	EXEC SQL BEGIN DECLARE SECTION;
		char base[100]; 
		const char* user = "grtt6";
		const char* motDePasse = "grtt6";
	EXEC SQL END DECLARE SECTION;

	EXEC SQL INCLUDE sqlca;
	EXEC SQL WHENEVER sqlerror sqlprint;

	/* --- DEBUT CONNEXION A LA BASE --- */
	strcpy(base, "tcp:postgresql://127.0.0.1:5432/grtt6");

	printf ("Connexion à la base : %s\n", base);
	EXEC SQL CONNECT to :base USER :user USING :motDePasse;
	printf ("Connexion à la base effectuée\n");
	/* --- FIN CONNEXION A LA BASE --- */

	do {
		printf("Que voulez-vous faire ?\n");
		printf("1 - Ajouter une personne\n");
		printf("2 - Supprimer une personne\n");
		printf("3 - Faire une réservation de salle\n");
		printf("4 - Afficher la liste des lieux visités par une personne\n");
		printf("5 - Afficher le rapport d'activité d'une personne\n");
		printf("6 - Afficher le rapport d'intrusion\n");
		printf("7 - SORTIR\n");

		scanf("%i", &entree);

		switch(entree) {
			case 1 :
				printf("1 - Ajouter une personne\n");
				insererPersonne();
				break;
			case 2 :
				printf("2 - Supprimer une personne\n");
				supprimerPersonne();
				break;
			case 3 :
				printf("3 - Faire une réservation de salle\n");
				insererReservation();
				break;
			case 4 :
				printf("4 - Afficher la liste des lieux visités par une personne\n");
				lieuxVisites();
				break;
			case 5 :
				printf("5 - Afficher le rapport d'activité d'une personne\n");
				rapportActivite();
				break;
			case 6 : 
				printf("6 - Afficher le rapport d'intrusion\n");
				afficherRapportIntrusion();
				break;
			case 7 :
				sortir = 1;
				break;
		}
		EXEC SQL COMMIT;
		
	} while (sortir != 1);

	printf ("Déconnexion\n");
	EXEC SQL DISCONNECT;
	printf ("Déconnexion effectuée\n");

	return EXIT_SUCCESS;
}